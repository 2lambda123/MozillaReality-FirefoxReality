import java.util.regex.Matcher
import java.util.regex.Pattern

configurations.maybeCreate('default')

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String taskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (taskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(taskReqStr)
    if (matcher.find()) {
        String flavor = matcher.group(1)
        // This makes first character to lowercase.
        char[] c = flavor.toCharArray()
        c[0] = Character.toLowerCase(c[0])
        flavor = new String(c)
        println "getCurrentFlavor:" + flavor
        return flavor
    } else {
        println "getCurrentFlavor:cannot_find_current_flavor"
        return ""
    }
}

def addArtifact(path) {
    def aar = new File(path)
    if (aar.exists()) {
        artifacts.add('default', aar)
    } else {
        throw new GradleException('Failed to find GeckoView AAR at: ' + gradle.geckoViewLocal)
    }
}

def flavor = getCurrentFlavor()
if (flavor.contains("Arm") && gradle.hasProperty('geckoViewLocalArm')) {
    addArtifact(gradle.geckoViewLocalArm)

} else if (flavor.contains("X86") && gradle.hasProperty('geckoViewLocalX86')) {
    addArtifact(gradle.geckoViewLocalX86)
}
